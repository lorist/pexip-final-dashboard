# frontend/nginx.conf
# This configuration is for the Nginx server running inside the 'frontend' Docker container.

server {
  listen 80;
  server_name localhost;

  # Add Docker's internal DNS resolver
  # This allows Nginx to dynamically resolve service names (like 'backend') at runtime.
  # 127.0.0.11 is the default Docker internal DNS server.
  # valid=30s means the DNS entry will be cached for 30 seconds.
  resolver 127.0.0.11 valid=30s;

  # Serve the React application's static files
  # The React build output (index.html, static/js, static/css, etc.) is copied to /usr/share/nginx/html
  location / {
    root   /usr/share/nginx/html;
    index  index.html;
    try_files $uri $uri/ /index.html; # Important for React Router to handle client-side routing
  }

  # Proxy Pexip client API calls to your Pexip Infinity instance
  location /api/ {
    # The 'set $upstream_pexip' is needed because 'proxy_pass' cannot use variables directly
    # with a non-variable hostname if a resolver is defined in the same block.
    set $upstream_pexip "https://internal.lorist.org";
    proxy_pass $upstream_pexip;
    proxy_set_header Host internal.lorist.org;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_buffering off;
    proxy_cache off;
    proxy_set_header Connection '';
    proxy_http_version 1.1;
    proxy_redirect off;
  }

  # NEW: Proxy endpoint for fetching initial active conferences data from backend
  # Your React app will fetch initial data from http://localhost/active-conferences-data
  location /active-conferences-data {
    set $upstream_backend "http://backend:5000"; # 'backend' is the service name in docker-compose.yml
    proxy_pass $upstream_backend/active-conferences-data;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_buffering off; # Disable buffering for API responses
  }

  # Proxy Pexip Event Sink POSTs to your Node.js backend service
  # Pexip Infinity will post to http://<your-host-ip>/pexip-events-webhook
  location /pexip-events-webhook {
    set $upstream_backend "http://backend:5000"; # 'backend' is the service name in docker-compose.yml
    proxy_pass $upstream_backend/webhook;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_buffering off;
    proxy_request_buffering off;
  }

  # Proxy Server-Sent Events (SSE) to your Node.js backend service
  # Your React app will connect to http://localhost/sse-events
  location /sse-events {
    set $upstream_backend "http://backend:5000"; # 'backend' is the service name in docker-compose.yml
    proxy_pass $upstream_backend/stream;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_buffering off; # Crucial for SSE: disable Nginx buffering
    proxy_cache off;
    proxy_set_header Connection 'keep-alive';
    proxy_set_header Content-Type 'text/event-stream';
    proxy_read_timeout 3600s; # Long timeout for SSE connections
  }
}
